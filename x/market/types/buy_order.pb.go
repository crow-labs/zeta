// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/buy_order.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BuyOrder struct {
	BuyOrderId  uint64     `protobuf:"varint,1,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId uint64     `protobuf:"varint,2,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	BuyerId     uint64     `protobuf:"varint,3,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	CrowId      uint64     `protobuf:"varint,4,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Price       types.Coin `protobuf:"bytes,5,opt,name=price,proto3" json:"price"`
	Collateral  types.Coin `protobuf:"bytes,6,opt,name=collateral,proto3" json:"collateral"`
}

func (m *BuyOrder) Reset()         { *m = BuyOrder{} }
func (m *BuyOrder) String() string { return proto.CompactTextString(m) }
func (*BuyOrder) ProtoMessage()    {}
func (*BuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cabc6187fde22d5, []int{0}
}
func (m *BuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrder.Merge(m, src)
}
func (m *BuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrder proto.InternalMessageInfo

func (m *BuyOrder) GetBuyOrderId() uint64 {
	if m != nil {
		return m.BuyOrderId
	}
	return 0
}

func (m *BuyOrder) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

func (m *BuyOrder) GetBuyerId() uint64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *BuyOrder) GetCrowId() uint64 {
	if m != nil {
		return m.CrowId
	}
	return 0
}

func (m *BuyOrder) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *BuyOrder) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*BuyOrder)(nil), "zeta.market.BuyOrder")
}

func init() { proto.RegisterFile("market/buy_order.proto", fileDescriptor_7cabc6187fde22d5) }

var fileDescriptor_7cabc6187fde22d5 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x63, 0x48, 0x03, 0x72, 0x36, 0x83, 0xaa, 0xd0, 0xc1, 0x44, 0x4c, 0x5d, 0xb0, 0x55,
	0x10, 0x33, 0x52, 0x98, 0x3a, 0x21, 0x75, 0x64, 0x41, 0x76, 0x62, 0x55, 0x11, 0x69, 0x2f, 0x72,
	0x1c, 0x20, 0xfc, 0x0a, 0x7e, 0x56, 0xc7, 0x8e, 0x4c, 0x08, 0x25, 0xff, 0x81, 0x19, 0xc5, 0x4e,
	0xa5, 0x8c, 0x6c, 0x77, 0xef, 0x7b, 0x77, 0x7a, 0x7a, 0x78, 0xba, 0x11, 0xfa, 0x45, 0x19, 0x2e,
	0xeb, 0xe6, 0x19, 0x74, 0xa6, 0x34, 0x2b, 0x35, 0x18, 0x20, 0xe1, 0x87, 0x32, 0x82, 0x39, 0x38,
	0x3b, 0x5f, 0xc3, 0x1a, 0xac, 0xce, 0xfb, 0xc9, 0x59, 0x66, 0x34, 0x85, 0x6a, 0x03, 0x15, 0x97,
	0xa2, 0x52, 0xfc, 0x75, 0x21, 0x95, 0x11, 0x0b, 0x9e, 0x42, 0xbe, 0x75, 0xfc, 0xea, 0x17, 0xe1,
	0xd3, 0xa4, 0x6e, 0x1e, 0xfb, 0xaf, 0x84, 0x62, 0x2c, 0x87, 0x79, 0x99, 0x45, 0x28, 0x46, 0x73,
	0x7f, 0x35, 0x52, 0x48, 0x8c, 0xc3, 0x4a, 0x15, 0xc5, 0xc1, 0x70, 0x64, 0x0d, 0x63, 0x89, 0x44,
	0xf8, 0x44, 0xd6, 0x8d, 0xa5, 0xc7, 0x96, 0x1e, 0x56, 0x32, 0xc5, 0x41, 0xaa, 0xe1, 0x6d, 0x99,
	0x45, 0xbe, 0x05, 0xc3, 0x46, 0xee, 0xf0, 0xa4, 0xd4, 0x79, 0xaa, 0xa2, 0x49, 0x8c, 0xe6, 0xe1,
	0xcd, 0x05, 0x73, 0x81, 0x59, 0x1f, 0x98, 0x0d, 0x81, 0xd9, 0x03, 0xe4, 0xdb, 0xc4, 0xdf, 0x7d,
	0x5f, 0x7a, 0x2b, 0xe7, 0x26, 0xf7, 0x18, 0xa7, 0x50, 0x14, 0xc2, 0x28, 0x2d, 0x8a, 0x28, 0xf8,
	0xdf, 0xed, 0xe8, 0x24, 0xb9, 0xde, 0xb5, 0x14, 0xed, 0x5b, 0x8a, 0x7e, 0x5a, 0x8a, 0x3e, 0x3b,
	0xea, 0xed, 0x3b, 0xea, 0x7d, 0x75, 0xd4, 0x7b, 0x3a, 0xeb, 0x5b, 0xe5, 0xef, 0x7c, 0x28, 0xdd,
	0x34, 0xa5, 0xaa, 0x64, 0x60, 0xeb, 0xba, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x75, 0xf9, 0x94,
	0xef, 0x8b, 0x01, 0x00, 0x00,
}

func (m *BuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBuyOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBuyOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.CrowId != 0 {
		i = encodeVarintBuyOrder(dAtA, i, uint64(m.CrowId))
		i--
		dAtA[i] = 0x20
	}
	if m.BuyerId != 0 {
		i = encodeVarintBuyOrder(dAtA, i, uint64(m.BuyerId))
		i--
		dAtA[i] = 0x18
	}
	if m.SellOrderId != 0 {
		i = encodeVarintBuyOrder(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.BuyOrderId != 0 {
		i = encodeVarintBuyOrder(dAtA, i, uint64(m.BuyOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBuyOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovBuyOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyOrderId != 0 {
		n += 1 + sovBuyOrder(uint64(m.BuyOrderId))
	}
	if m.SellOrderId != 0 {
		n += 1 + sovBuyOrder(uint64(m.SellOrderId))
	}
	if m.BuyerId != 0 {
		n += 1 + sovBuyOrder(uint64(m.BuyerId))
	}
	if m.CrowId != 0 {
		n += 1 + sovBuyOrder(uint64(m.CrowId))
	}
	l = m.Price.Size()
	n += 1 + l + sovBuyOrder(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovBuyOrder(uint64(l))
	return n
}

func sovBuyOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBuyOrder(x uint64) (n int) {
	return sovBuyOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderId", wireType)
			}
			m.BuyOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			m.BuyerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			m.CrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuyOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuyOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuyOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuyOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuyOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuyOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuyOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuyOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBuyOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBuyOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBuyOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuyOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBuyOrder = fmt.Errorf("proto: unexpected end of group")
)
