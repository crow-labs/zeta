// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/sell_order.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SellOrder struct {
	SellOrderId uint64     `protobuf:"varint,1,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	ItemId      uint64     `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	SellerId    uint64     `protobuf:"varint,3,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	CrowId      uint64     `protobuf:"varint,4,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Price       types.Coin `protobuf:"bytes,5,opt,name=price,proto3" json:"price"`
	Collateral  types.Coin `protobuf:"bytes,6,opt,name=collateral,proto3" json:"collateral"`
}

func (m *SellOrder) Reset()         { *m = SellOrder{} }
func (m *SellOrder) String() string { return proto.CompactTextString(m) }
func (*SellOrder) ProtoMessage()    {}
func (*SellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b79508a628b571, []int{0}
}
func (m *SellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrder.Merge(m, src)
}
func (m *SellOrder) XXX_Size() int {
	return m.Size()
}
func (m *SellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrder proto.InternalMessageInfo

func (m *SellOrder) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

func (m *SellOrder) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *SellOrder) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *SellOrder) GetCrowId() uint64 {
	if m != nil {
		return m.CrowId
	}
	return 0
}

func (m *SellOrder) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *SellOrder) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*SellOrder)(nil), "zeta.market.SellOrder")
}

func init() { proto.RegisterFile("market/sell_order.proto", fileDescriptor_59b79508a628b571) }

var fileDescriptor_59b79508a628b571 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x18, 0xc4, 0x63, 0x48, 0x23, 0x70, 0x36, 0x83, 0x20, 0x64, 0x30, 0x11, 0x53, 0x17, 0x6c, 0x15,
	0xc4, 0x8c, 0x54, 0xa6, 0x4c, 0x48, 0x65, 0x63, 0x41, 0x4e, 0x62, 0x55, 0x11, 0x4e, 0xbf, 0xc8,
	0xb6, 0xf8, 0xf7, 0x14, 0x3c, 0x56, 0xc7, 0x8e, 0x4c, 0x08, 0x25, 0x4f, 0xc0, 0x1b, 0x20, 0xc7,
	0x01, 0x75, 0x64, 0xf3, 0x7d, 0x77, 0x3f, 0xeb, 0x74, 0xf8, 0xb8, 0x11, 0xfa, 0x51, 0x5a, 0x6e,
	0xa4, 0x52, 0x0f, 0xa0, 0x2b, 0xa9, 0x59, 0xab, 0xc1, 0x02, 0x89, 0xdf, 0xa4, 0x15, 0xcc, 0xbb,
	0xe9, 0xe1, 0x12, 0x96, 0x30, 0xdc, 0xb9, 0x7b, 0xf9, 0x48, 0x4a, 0x4b, 0x30, 0x0d, 0x18, 0x5e,
	0x08, 0x23, 0xf9, 0xd3, 0xac, 0x90, 0x56, 0xcc, 0x78, 0x09, 0xf5, 0xca, 0xfb, 0x67, 0xdf, 0x08,
	0xef, 0xdf, 0x49, 0xa5, 0x6e, 0xdd, 0xb7, 0x24, 0xc3, 0xb1, 0xf9, 0x15, 0x79, 0x95, 0xa0, 0x0c,
	0x4d, 0xc3, 0xc5, 0xf6, 0x89, 0x1c, 0xe1, 0xa8, 0xb6, 0xb2, 0xc9, 0xab, 0x64, 0x67, 0x30, 0x47,
	0x45, 0x52, 0xbc, 0xe7, 0x62, 0x03, 0xb6, 0x3b, 0x38, 0x7f, 0xda, 0x31, 0xa5, 0x86, 0xe7, 0xbc,
	0x4a, 0x42, 0xcf, 0x78, 0x45, 0xae, 0xf0, 0xa4, 0xd5, 0x75, 0x29, 0x93, 0x49, 0x86, 0xa6, 0xf1,
	0xc5, 0x09, 0xf3, 0x5d, 0x99, 0xeb, 0xca, 0xc6, 0xae, 0xec, 0x06, 0xea, 0xd5, 0x3c, 0x5c, 0x7f,
	0x9e, 0x06, 0x0b, 0x9f, 0x26, 0xd7, 0x18, 0x97, 0xa0, 0x94, 0xb0, 0x52, 0x0b, 0x95, 0x44, 0xff,
	0x63, 0xb7, 0x90, 0xf9, 0xf9, 0xba, 0xa3, 0x68, 0xd3, 0x51, 0xf4, 0xd5, 0x51, 0xf4, 0xde, 0xd3,
	0x60, 0xd3, 0xd3, 0xe0, 0xa3, 0xa7, 0xc1, 0xfd, 0x81, 0x1b, 0x94, 0xbf, 0xf0, 0x71, 0x70, 0xfb,
	0xda, 0x4a, 0x53, 0x44, 0xc3, 0x52, 0x97, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xf8, 0x10,
	0x20, 0x87, 0x01, 0x00, 0x00,
}

func (m *SellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSellOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSellOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.CrowId != 0 {
		i = encodeVarintSellOrder(dAtA, i, uint64(m.CrowId))
		i--
		dAtA[i] = 0x20
	}
	if m.SellerId != 0 {
		i = encodeVarintSellOrder(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemId != 0 {
		i = encodeVarintSellOrder(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.SellOrderId != 0 {
		i = encodeVarintSellOrder(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSellOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovSellOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderId != 0 {
		n += 1 + sovSellOrder(uint64(m.SellOrderId))
	}
	if m.ItemId != 0 {
		n += 1 + sovSellOrder(uint64(m.ItemId))
	}
	if m.SellerId != 0 {
		n += 1 + sovSellOrder(uint64(m.SellerId))
	}
	if m.CrowId != 0 {
		n += 1 + sovSellOrder(uint64(m.CrowId))
	}
	l = m.Price.Size()
	n += 1 + l + sovSellOrder(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovSellOrder(uint64(l))
	return n
}

func sovSellOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSellOrder(x uint64) (n int) {
	return sovSellOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			m.CrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSellOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSellOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSellOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSellOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSellOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSellOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSellOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSellOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSellOrder = fmt.Errorf("proto: unexpected end of group")
)
