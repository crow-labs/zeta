// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPrepareItem struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Desciption   string `protobuf:"bytes,3,opt,name=desciption,proto3" json:"desciption,omitempty"`
	ExternalLink string `protobuf:"bytes,4,opt,name=externalLink,proto3" json:"externalLink,omitempty"`
	SellerId     uint64 `protobuf:"varint,5,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
}

func (m *MsgPrepareItem) Reset()         { *m = MsgPrepareItem{} }
func (m *MsgPrepareItem) String() string { return proto.CompactTextString(m) }
func (*MsgPrepareItem) ProtoMessage()    {}
func (*MsgPrepareItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{0}
}
func (m *MsgPrepareItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPrepareItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPrepareItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPrepareItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPrepareItem.Merge(m, src)
}
func (m *MsgPrepareItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgPrepareItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPrepareItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPrepareItem proto.InternalMessageInfo

func (m *MsgPrepareItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPrepareItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgPrepareItem) GetDesciption() string {
	if m != nil {
		return m.Desciption
	}
	return ""
}

func (m *MsgPrepareItem) GetExternalLink() string {
	if m != nil {
		return m.ExternalLink
	}
	return ""
}

func (m *MsgPrepareItem) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

type MsgPrepareItemResponse struct {
	ItemId uint64 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *MsgPrepareItemResponse) Reset()         { *m = MsgPrepareItemResponse{} }
func (m *MsgPrepareItemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPrepareItemResponse) ProtoMessage()    {}
func (*MsgPrepareItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{1}
}
func (m *MsgPrepareItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPrepareItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPrepareItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPrepareItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPrepareItemResponse.Merge(m, src)
}
func (m *MsgPrepareItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPrepareItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPrepareItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPrepareItemResponse proto.InternalMessageInfo

func (m *MsgPrepareItemResponse) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type MsgRemoveItem struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ItemId   uint64 `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	SellerId uint64 `protobuf:"varint,3,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
}

func (m *MsgRemoveItem) Reset()         { *m = MsgRemoveItem{} }
func (m *MsgRemoveItem) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveItem) ProtoMessage()    {}
func (*MsgRemoveItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{2}
}
func (m *MsgRemoveItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveItem.Merge(m, src)
}
func (m *MsgRemoveItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveItem proto.InternalMessageInfo

func (m *MsgRemoveItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveItem) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *MsgRemoveItem) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

type MsgRemoveItemResponse struct {
}

func (m *MsgRemoveItemResponse) Reset()         { *m = MsgRemoveItemResponse{} }
func (m *MsgRemoveItemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveItemResponse) ProtoMessage()    {}
func (*MsgRemoveItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{3}
}
func (m *MsgRemoveItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveItemResponse.Merge(m, src)
}
func (m *MsgRemoveItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveItemResponse proto.InternalMessageInfo

type MsgListItem struct {
	Creator    string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ItemId     uint64     `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	SellerId   uint64     `protobuf:"varint,3,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Price      types.Coin `protobuf:"bytes,4,opt,name=price,proto3" json:"price"`
	Collateral types.Coin `protobuf:"bytes,5,opt,name=collateral,proto3" json:"collateral"`
}

func (m *MsgListItem) Reset()         { *m = MsgListItem{} }
func (m *MsgListItem) String() string { return proto.CompactTextString(m) }
func (*MsgListItem) ProtoMessage()    {}
func (*MsgListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{4}
}
func (m *MsgListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgListItem.Merge(m, src)
}
func (m *MsgListItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgListItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgListItem proto.InternalMessageInfo

func (m *MsgListItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgListItem) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *MsgListItem) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *MsgListItem) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *MsgListItem) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

type MsgListItemResponse struct {
	SellOrderId uint64 `protobuf:"varint,1,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
}

func (m *MsgListItemResponse) Reset()         { *m = MsgListItemResponse{} }
func (m *MsgListItemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgListItemResponse) ProtoMessage()    {}
func (*MsgListItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{5}
}
func (m *MsgListItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgListItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgListItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgListItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgListItemResponse.Merge(m, src)
}
func (m *MsgListItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgListItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgListItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgListItemResponse proto.InternalMessageInfo

func (m *MsgListItemResponse) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

type MsgPlaceBuyOrder struct {
	Creator     string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SellOrderId uint64     `protobuf:"varint,2,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	BuyerId     uint64     `protobuf:"varint,3,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	Price       types.Coin `protobuf:"bytes,4,opt,name=price,proto3" json:"price"`
	Collateral  types.Coin `protobuf:"bytes,5,opt,name=collateral,proto3" json:"collateral"`
}

func (m *MsgPlaceBuyOrder) Reset()         { *m = MsgPlaceBuyOrder{} }
func (m *MsgPlaceBuyOrder) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBuyOrder) ProtoMessage()    {}
func (*MsgPlaceBuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{6}
}
func (m *MsgPlaceBuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBuyOrder.Merge(m, src)
}
func (m *MsgPlaceBuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBuyOrder proto.InternalMessageInfo

func (m *MsgPlaceBuyOrder) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPlaceBuyOrder) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

func (m *MsgPlaceBuyOrder) GetBuyerId() uint64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *MsgPlaceBuyOrder) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *MsgPlaceBuyOrder) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

type MsgPlaceBuyOrderResponse struct {
	BuyOrderId string `protobuf:"bytes,1,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
}

func (m *MsgPlaceBuyOrderResponse) Reset()         { *m = MsgPlaceBuyOrderResponse{} }
func (m *MsgPlaceBuyOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBuyOrderResponse) ProtoMessage()    {}
func (*MsgPlaceBuyOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{7}
}
func (m *MsgPlaceBuyOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBuyOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBuyOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBuyOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBuyOrderResponse.Merge(m, src)
}
func (m *MsgPlaceBuyOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBuyOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBuyOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBuyOrderResponse proto.InternalMessageInfo

func (m *MsgPlaceBuyOrderResponse) GetBuyOrderId() string {
	if m != nil {
		return m.BuyOrderId
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgPrepareItem)(nil), "zeta.market.MsgPrepareItem")
	proto.RegisterType((*MsgPrepareItemResponse)(nil), "zeta.market.MsgPrepareItemResponse")
	proto.RegisterType((*MsgRemoveItem)(nil), "zeta.market.MsgRemoveItem")
	proto.RegisterType((*MsgRemoveItemResponse)(nil), "zeta.market.MsgRemoveItemResponse")
	proto.RegisterType((*MsgListItem)(nil), "zeta.market.MsgListItem")
	proto.RegisterType((*MsgListItemResponse)(nil), "zeta.market.MsgListItemResponse")
	proto.RegisterType((*MsgPlaceBuyOrder)(nil), "zeta.market.MsgPlaceBuyOrder")
	proto.RegisterType((*MsgPlaceBuyOrderResponse)(nil), "zeta.market.MsgPlaceBuyOrderResponse")
}

func init() { proto.RegisterFile("market/tx.proto", fileDescriptor_2966ca2342567dca) }

var fileDescriptor_2966ca2342567dca = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4f, 0x6b, 0xd4, 0x50,
	0x10, 0xdf, 0xec, 0x9f, 0xda, 0xce, 0x5a, 0x95, 0xd7, 0x5a, 0x63, 0xc4, 0xb8, 0x44, 0x84, 0x5e,
	0x4c, 0x6c, 0x45, 0x04, 0x2f, 0xc2, 0x0a, 0xc2, 0xc2, 0x2e, 0x95, 0x80, 0x17, 0xc1, 0xc3, 0xdb,
	0xec, 0x10, 0x42, 0xb3, 0x79, 0xe1, 0xbd, 0xd7, 0xb2, 0xeb, 0xa7, 0xf0, 0x23, 0xf8, 0x5d, 0xbc,
	0xf4, 0x58, 0xf0, 0xe2, 0x49, 0xca, 0xee, 0x17, 0x91, 0xbc, 0x6c, 0xb2, 0x2f, 0x29, 0x5d, 0x3d,
	0x08, 0xde, 0x32, 0xbf, 0xdf, 0xcc, 0x2f, 0x33, 0xbf, 0x99, 0x04, 0xee, 0x4e, 0x29, 0x3f, 0x45,
	0xe9, 0xc9, 0x99, 0x9b, 0x72, 0x26, 0x19, 0xe9, 0x7e, 0x41, 0x49, 0xdd, 0x1c, 0xb5, 0xec, 0x80,
	0x89, 0x29, 0x13, 0xde, 0x98, 0x0a, 0xf4, 0xce, 0x8f, 0xc6, 0x28, 0xe9, 0x91, 0x17, 0xb0, 0x28,
	0xc9, 0x93, 0xad, 0xfd, 0x90, 0x85, 0x4c, 0x3d, 0x7a, 0xd9, 0x53, 0x8e, 0x3a, 0xdf, 0x0c, 0xb8,
	0x33, 0x12, 0xe1, 0x07, 0x8e, 0x29, 0xe5, 0x38, 0x90, 0x38, 0x25, 0x26, 0xdc, 0x0a, 0x38, 0x52,
	0xc9, 0xb8, 0x69, 0xf4, 0x8c, 0xc3, 0x1d, 0xbf, 0x08, 0xc9, 0x3e, 0x74, 0x64, 0x24, 0x63, 0x34,
	0x9b, 0x0a, 0xcf, 0x03, 0x62, 0x03, 0x4c, 0x50, 0x04, 0x51, 0x2a, 0x23, 0x96, 0x98, 0x2d, 0x45,
	0x69, 0x08, 0x71, 0xe0, 0x36, 0xce, 0x24, 0xf2, 0x84, 0xc6, 0xc3, 0x28, 0x39, 0x35, 0xdb, 0x2a,
	0xa3, 0x82, 0x11, 0x0b, 0xb6, 0x05, 0xc6, 0x31, 0xf2, 0xc1, 0xc4, 0xec, 0xf4, 0x8c, 0xc3, 0xb6,
	0x5f, 0xc6, 0xce, 0x0b, 0x38, 0xa8, 0x76, 0xe8, 0xa3, 0x48, 0x59, 0x22, 0x90, 0x1c, 0xc0, 0x56,
	0x24, 0x71, 0x3a, 0x98, 0xa8, 0x46, 0xdb, 0xfe, 0x2a, 0x72, 0x3e, 0xc3, 0xee, 0x48, 0x84, 0x3e,
	0x4e, 0xd9, 0xf9, 0x9f, 0x46, 0x5a, 0x4b, 0x34, 0x75, 0x89, 0x4a, 0x43, 0xad, 0x5a, 0x43, 0x0f,
	0xe0, 0x7e, 0x45, 0xbe, 0xe8, 0xc7, 0xf9, 0x61, 0x40, 0x77, 0x24, 0xc2, 0x61, 0x24, 0xe4, 0xbf,
	0x7f, 0x2d, 0x79, 0x05, 0x9d, 0x94, 0x47, 0x01, 0x2a, 0x03, 0xbb, 0xc7, 0x0f, 0xdd, 0x7c, 0xe1,
	0x6e, 0xb6, 0x70, 0x77, 0xb5, 0x70, 0xf7, 0x1d, 0x8b, 0x92, 0x7e, 0xfb, 0xe2, 0xd7, 0x93, 0x86,
	0x9f, 0x67, 0x93, 0xb7, 0x00, 0x01, 0x8b, 0x63, 0x2a, 0x91, 0xd3, 0x58, 0x99, 0xfb, 0x17, 0xb5,
	0x5a, 0x89, 0xf3, 0x1a, 0xf6, 0xb4, 0xa1, 0x4a, 0xf3, 0x7b, 0xd0, 0xcd, 0x5a, 0x3b, 0xe1, 0x13,
	0xd5, 0x6d, 0xbe, 0x01, 0x1d, 0x72, 0xae, 0x0c, 0xb8, 0x97, 0x6d, 0x2e, 0xa6, 0x01, 0xf6, 0xcf,
	0xe6, 0x0a, 0xde, 0xe0, 0x49, 0x4d, 0xb0, 0x79, 0x4d, 0x30, 0xab, 0x1d, 0x9f, 0xcd, 0x35, 0x73,
	0x8a, 0xf0, 0xbf, 0x79, 0xf3, 0x06, 0xcc, 0xfa, 0x84, 0xa5, 0x41, 0x36, 0xc0, 0x78, 0x85, 0xad,
	0xfc, 0xd9, 0xf1, 0x35, 0xe4, 0xf8, 0x7b, 0x13, 0x5a, 0x23, 0x11, 0x92, 0x13, 0xe8, 0xea, 0x9f,
	0xdf, 0x23, 0x57, 0xfb, 0xaa, 0xdd, 0xea, 0xe5, 0x5b, 0x4f, 0x37, 0x90, 0xe5, 0x8b, 0x87, 0x00,
	0xda, 0xed, 0x5b, 0xf5, 0x92, 0x35, 0x67, 0x39, 0x37, 0x73, 0xa5, 0xda, 0x7b, 0xd8, 0x5e, 0x1f,
	0x74, 0x3d, 0xbf, 0x60, 0xac, 0xde, 0x4d, 0x4c, 0xa9, 0xf3, 0x11, 0x76, 0xab, 0x97, 0xf0, 0xf8,
	0xda, 0x2c, 0x3a, 0x6d, 0x3d, 0xdb, 0x48, 0x17, 0xb2, 0xfd, 0xe7, 0x17, 0x0b, 0xdb, 0xb8, 0x5c,
	0xd8, 0xc6, 0xd5, 0xc2, 0x36, 0xbe, 0x2e, 0xed, 0xc6, 0xe5, 0xd2, 0x6e, 0xfc, 0x5c, 0xda, 0x8d,
	0x4f, 0x7b, 0x59, 0xbd, 0x37, 0xf3, 0x8a, 0xbf, 0xe6, 0x3c, 0x45, 0x31, 0xde, 0x52, 0xbf, 0xbd,
	0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0xbc, 0xdc, 0xb1, 0x4c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	PrepareItem(ctx context.Context, in *MsgPrepareItem, opts ...grpc.CallOption) (*MsgPrepareItemResponse, error)
	RemoveItem(ctx context.Context, in *MsgRemoveItem, opts ...grpc.CallOption) (*MsgRemoveItemResponse, error)
	ListItem(ctx context.Context, in *MsgListItem, opts ...grpc.CallOption) (*MsgListItemResponse, error)
	PlaceBuyOrder(ctx context.Context, in *MsgPlaceBuyOrder, opts ...grpc.CallOption) (*MsgPlaceBuyOrderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PrepareItem(ctx context.Context, in *MsgPrepareItem, opts ...grpc.CallOption) (*MsgPrepareItemResponse, error) {
	out := new(MsgPrepareItemResponse)
	err := c.cc.Invoke(ctx, "/zeta.market.Msg/PrepareItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveItem(ctx context.Context, in *MsgRemoveItem, opts ...grpc.CallOption) (*MsgRemoveItemResponse, error) {
	out := new(MsgRemoveItemResponse)
	err := c.cc.Invoke(ctx, "/zeta.market.Msg/RemoveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ListItem(ctx context.Context, in *MsgListItem, opts ...grpc.CallOption) (*MsgListItemResponse, error) {
	out := new(MsgListItemResponse)
	err := c.cc.Invoke(ctx, "/zeta.market.Msg/ListItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlaceBuyOrder(ctx context.Context, in *MsgPlaceBuyOrder, opts ...grpc.CallOption) (*MsgPlaceBuyOrderResponse, error) {
	out := new(MsgPlaceBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/zeta.market.Msg/PlaceBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	PrepareItem(context.Context, *MsgPrepareItem) (*MsgPrepareItemResponse, error)
	RemoveItem(context.Context, *MsgRemoveItem) (*MsgRemoveItemResponse, error)
	ListItem(context.Context, *MsgListItem) (*MsgListItemResponse, error)
	PlaceBuyOrder(context.Context, *MsgPlaceBuyOrder) (*MsgPlaceBuyOrderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PrepareItem(ctx context.Context, req *MsgPrepareItem) (*MsgPrepareItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareItem not implemented")
}
func (*UnimplementedMsgServer) RemoveItem(ctx context.Context, req *MsgRemoveItem) (*MsgRemoveItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (*UnimplementedMsgServer) ListItem(ctx context.Context, req *MsgListItem) (*MsgListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItem not implemented")
}
func (*UnimplementedMsgServer) PlaceBuyOrder(ctx context.Context, req *MsgPlaceBuyOrder) (*MsgPlaceBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBuyOrder not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PrepareItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPrepareItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PrepareItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeta.market.Msg/PrepareItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PrepareItem(ctx, req.(*MsgPrepareItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeta.market.Msg/RemoveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveItem(ctx, req.(*MsgRemoveItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeta.market.Msg/ListItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ListItem(ctx, req.(*MsgListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlaceBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceBuyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlaceBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeta.market.Msg/PlaceBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlaceBuyOrder(ctx, req.(*MsgPlaceBuyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zeta.market.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareItem",
			Handler:    _Msg_PrepareItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _Msg_RemoveItem_Handler,
		},
		{
			MethodName: "ListItem",
			Handler:    _Msg_ListItem_Handler,
		},
		{
			MethodName: "PlaceBuyOrder",
			Handler:    _Msg_PlaceBuyOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/tx.proto",
}

func (m *MsgPrepareItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPrepareItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPrepareItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellerId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExternalLink) > 0 {
		i -= len(m.ExternalLink)
		copy(dAtA[i:], m.ExternalLink)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExternalLink)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desciption) > 0 {
		i -= len(m.Desciption)
		copy(dAtA[i:], m.Desciption)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desciption)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPrepareItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPrepareItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPrepareItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellerId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.SellerId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgListItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgListItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgListItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.BuyerId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BuyerId))
		i--
		dAtA[i] = 0x18
	}
	if m.SellOrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBuyOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBuyOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBuyOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyOrderId) > 0 {
		i -= len(m.BuyOrderId)
		copy(dAtA[i:], m.BuyOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyOrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPrepareItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desciption)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExternalLink)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SellerId != 0 {
		n += 1 + sovTx(uint64(m.SellerId))
	}
	return n
}

func (m *MsgPrepareItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovTx(uint64(m.ItemId))
	}
	return n
}

func (m *MsgRemoveItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ItemId != 0 {
		n += 1 + sovTx(uint64(m.ItemId))
	}
	if m.SellerId != 0 {
		n += 1 + sovTx(uint64(m.SellerId))
	}
	return n
}

func (m *MsgRemoveItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ItemId != 0 {
		n += 1 + sovTx(uint64(m.ItemId))
	}
	if m.SellerId != 0 {
		n += 1 + sovTx(uint64(m.SellerId))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgListItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderId != 0 {
		n += 1 + sovTx(uint64(m.SellOrderId))
	}
	return n
}

func (m *MsgPlaceBuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SellOrderId != 0 {
		n += 1 + sovTx(uint64(m.SellOrderId))
	}
	if m.BuyerId != 0 {
		n += 1 + sovTx(uint64(m.BuyerId))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPlaceBuyOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BuyOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPrepareItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPrepareItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPrepareItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desciption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desciption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPrepareItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPrepareItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPrepareItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgListItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgListItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgListItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			m.BuyerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBuyOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBuyOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBuyOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
