// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booth/vote_params.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoteParams struct {
	BuyerGuilt      bool       `protobuf:"varint,1,opt,name=buyerGuilt,proto3" json:"buyerGuilt,omitempty"`
	SellerGuilt     bool       `protobuf:"varint,2,opt,name=sellerGuilt,proto3" json:"sellerGuilt,omitempty"`
	BuyerReturn     types.Coin `protobuf:"bytes,3,opt,name=buyerReturn,proto3" json:"buyerReturn"`
	BuyerJailTime   uint64     `protobuf:"varint,4,opt,name=buyerJailTime,proto3" json:"buyerJailTime,omitempty"`
	SellerJailtime  uint64     `protobuf:"varint,5,opt,name=sellerJailtime,proto3" json:"sellerJailtime,omitempty"`
	BuyerBlacklist  bool       `protobuf:"varint,6,opt,name=buyerBlacklist,proto3" json:"buyerBlacklist,omitempty"`
	SellerBlacklist bool       `protobuf:"varint,7,opt,name=sellerBlacklist,proto3" json:"sellerBlacklist,omitempty"`
}

func (m *VoteParams) Reset()         { *m = VoteParams{} }
func (m *VoteParams) String() string { return proto.CompactTextString(m) }
func (*VoteParams) ProtoMessage()    {}
func (*VoteParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08541f9db625a02, []int{0}
}
func (m *VoteParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteParams.Merge(m, src)
}
func (m *VoteParams) XXX_Size() int {
	return m.Size()
}
func (m *VoteParams) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteParams.DiscardUnknown(m)
}

var xxx_messageInfo_VoteParams proto.InternalMessageInfo

func (m *VoteParams) GetBuyerGuilt() bool {
	if m != nil {
		return m.BuyerGuilt
	}
	return false
}

func (m *VoteParams) GetSellerGuilt() bool {
	if m != nil {
		return m.SellerGuilt
	}
	return false
}

func (m *VoteParams) GetBuyerReturn() types.Coin {
	if m != nil {
		return m.BuyerReturn
	}
	return types.Coin{}
}

func (m *VoteParams) GetBuyerJailTime() uint64 {
	if m != nil {
		return m.BuyerJailTime
	}
	return 0
}

func (m *VoteParams) GetSellerJailtime() uint64 {
	if m != nil {
		return m.SellerJailtime
	}
	return 0
}

func (m *VoteParams) GetBuyerBlacklist() bool {
	if m != nil {
		return m.BuyerBlacklist
	}
	return false
}

func (m *VoteParams) GetSellerBlacklist() bool {
	if m != nil {
		return m.SellerBlacklist
	}
	return false
}

func init() {
	proto.RegisterType((*VoteParams)(nil), "zeta.booth.VoteParams")
}

func init() { proto.RegisterFile("booth/vote_params.proto", fileDescriptor_f08541f9db625a02) }

var fileDescriptor_f08541f9db625a02 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x9b, 0x39, 0xa7, 0x64, 0xa8, 0x10, 0x04, 0xeb, 0x0e, 0xb1, 0x88, 0x48, 0x0f, 0x92,
	0x30, 0x7d, 0x02, 0xe7, 0x41, 0xf0, 0x24, 0x45, 0x3c, 0x78, 0x91, 0x74, 0x84, 0x19, 0xcc, 0xf6,
	0x8d, 0x26, 0x1d, 0xce, 0xa7, 0xf0, 0x55, 0x7c, 0x8b, 0x1d, 0x77, 0xf4, 0x24, 0xd2, 0xbe, 0x88,
	0x24, 0x51, 0xac, 0xbd, 0xb5, 0xbf, 0xef, 0xf7, 0x4f, 0xfe, 0xe4, 0xc3, 0x07, 0x39, 0x80, 0x7d,
	0xe2, 0x0b, 0xb0, 0xf2, 0x71, 0x2e, 0x0a, 0x31, 0x35, 0x6c, 0x5e, 0x80, 0x05, 0x82, 0x5f, 0xa5,
	0x15, 0xcc, 0x4f, 0x07, 0xfb, 0x13, 0x98, 0x80, 0xc7, 0xdc, 0x7d, 0x05, 0x63, 0x40, 0xc7, 0x60,
	0xa6, 0x60, 0x78, 0x2e, 0x8c, 0xe4, 0x8b, 0x61, 0x2e, 0xad, 0x18, 0xf2, 0x31, 0xa8, 0x59, 0x98,
	0x1f, 0xbf, 0x77, 0x30, 0xbe, 0x07, 0x2b, 0x6f, 0xfd, 0xb1, 0x84, 0x62, 0x9c, 0x97, 0x4b, 0x59,
	0x5c, 0x97, 0x4a, 0xdb, 0x18, 0x25, 0x28, 0xdd, 0xce, 0x1a, 0x84, 0x24, 0xb8, 0x6f, 0xa4, 0xd6,
	0xbf, 0x42, 0xc7, 0x0b, 0x4d, 0x44, 0x2e, 0x71, 0xdf, 0xfb, 0x99, 0xb4, 0x65, 0x31, 0x8b, 0x37,
	0x12, 0x94, 0xf6, 0xcf, 0x0f, 0x59, 0xa8, 0xc1, 0x5c, 0x0d, 0xf6, 0x53, 0x83, 0x5d, 0x81, 0x9a,
	0x8d, 0xba, 0xab, 0xcf, 0xa3, 0x28, 0x6b, 0x66, 0xc8, 0x09, 0xde, 0xf1, 0xbf, 0x37, 0x42, 0xe9,
	0x3b, 0x35, 0x95, 0x71, 0x37, 0x41, 0x69, 0x37, 0xfb, 0x0f, 0xc9, 0x29, 0xde, 0x0d, 0xf7, 0x3a,
	0x62, 0x9d, 0xb6, 0xe9, 0xb5, 0x16, 0x75, 0x9e, 0x0f, 0x8e, 0xb4, 0x18, 0x3f, 0x6b, 0x65, 0x6c,
	0xdc, 0xf3, 0xad, 0x5b, 0x94, 0xa4, 0x78, 0x2f, 0x24, 0xff, 0xc4, 0x2d, 0x2f, 0xb6, 0xf1, 0xe8,
	0x6c, 0x55, 0x51, 0xb4, 0xae, 0x28, 0xfa, 0xaa, 0x28, 0x7a, 0xab, 0x69, 0xb4, 0xae, 0x69, 0xf4,
	0x51, 0xd3, 0xe8, 0x81, 0xb8, 0x7d, 0xf0, 0x17, 0x1e, 0xf6, 0x65, 0x97, 0x73, 0x69, 0xf2, 0x9e,
	0x7f, 0xe8, 0x8b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x2c, 0x36, 0x52, 0xc5, 0x01, 0x00,
	0x00,
}

func (m *VoteParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellerBlacklist {
		i--
		if m.SellerBlacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.BuyerBlacklist {
		i--
		if m.BuyerBlacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SellerJailtime != 0 {
		i = encodeVarintVoteParams(dAtA, i, uint64(m.SellerJailtime))
		i--
		dAtA[i] = 0x28
	}
	if m.BuyerJailTime != 0 {
		i = encodeVarintVoteParams(dAtA, i, uint64(m.BuyerJailTime))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.BuyerReturn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVoteParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.SellerGuilt {
		i--
		if m.SellerGuilt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BuyerGuilt {
		i--
		if m.BuyerGuilt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoteParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoteParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoteParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyerGuilt {
		n += 2
	}
	if m.SellerGuilt {
		n += 2
	}
	l = m.BuyerReturn.Size()
	n += 1 + l + sovVoteParams(uint64(l))
	if m.BuyerJailTime != 0 {
		n += 1 + sovVoteParams(uint64(m.BuyerJailTime))
	}
	if m.SellerJailtime != 0 {
		n += 1 + sovVoteParams(uint64(m.SellerJailtime))
	}
	if m.BuyerBlacklist {
		n += 2
	}
	if m.SellerBlacklist {
		n += 2
	}
	return n
}

func sovVoteParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoteParams(x uint64) (n int) {
	return sovVoteParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoteParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilt = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilt = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerReturn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoteParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoteParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyerReturn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerJailTime", wireType)
			}
			m.BuyerJailTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerJailTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerJailtime", wireType)
			}
			m.SellerJailtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerJailtime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerBlacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerBlacklist = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerBlacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerBlacklist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVoteParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoteParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoteParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoteParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoteParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoteParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoteParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoteParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoteParams = fmt.Errorf("proto: unexpected end of group")
)
