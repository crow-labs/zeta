// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whitelist/seller.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Seller struct {
	SellerId       uint64   `protobuf:"varint,1,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContactInfo    string   `protobuf:"bytes,3,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
	Address        string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Status         string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ActiveItem     []uint64 `protobuf:"varint,6,rep,packed,name=activeItem,proto3" json:"activeItem,omitempty"`
	ActiveOrder    []uint64 `protobuf:"varint,7,rep,packed,name=activeOrder,proto3" json:"activeOrder,omitempty"`
	CompletedOrder []uint64 `protobuf:"varint,8,rep,packed,name=completedOrder,proto3" json:"completedOrder,omitempty"`
}

func (m *Seller) Reset()         { *m = Seller{} }
func (m *Seller) String() string { return proto.CompactTextString(m) }
func (*Seller) ProtoMessage()    {}
func (*Seller) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddc1456fe49128dc, []int{0}
}
func (m *Seller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Seller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Seller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Seller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seller.Merge(m, src)
}
func (m *Seller) XXX_Size() int {
	return m.Size()
}
func (m *Seller) XXX_DiscardUnknown() {
	xxx_messageInfo_Seller.DiscardUnknown(m)
}

var xxx_messageInfo_Seller proto.InternalMessageInfo

func (m *Seller) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *Seller) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Seller) GetContactInfo() string {
	if m != nil {
		return m.ContactInfo
	}
	return ""
}

func (m *Seller) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Seller) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Seller) GetActiveItem() []uint64 {
	if m != nil {
		return m.ActiveItem
	}
	return nil
}

func (m *Seller) GetActiveOrder() []uint64 {
	if m != nil {
		return m.ActiveOrder
	}
	return nil
}

func (m *Seller) GetCompletedOrder() []uint64 {
	if m != nil {
		return m.CompletedOrder
	}
	return nil
}

func init() {
	proto.RegisterType((*Seller)(nil), "zeta.whitelist.Seller")
}

func init() { proto.RegisterFile("whitelist/seller.proto", fileDescriptor_ddc1456fe49128dc) }

var fileDescriptor_ddc1456fe49128dc = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4a, 0xc4, 0x40,
	0x10, 0xc6, 0xb3, 0x5e, 0xcc, 0x9d, 0x23, 0x5c, 0x31, 0x45, 0x58, 0x2c, 0x96, 0x60, 0x21, 0xa9,
	0x2e, 0x82, 0x6f, 0x60, 0x97, 0x4a, 0x88, 0x9d, 0xdd, 0x9a, 0x8c, 0x18, 0x48, 0xb2, 0x61, 0x77,
	0xfc, 0xfb, 0x14, 0x3e, 0x96, 0xe5, 0x95, 0x96, 0x92, 0xbc, 0x83, 0xb5, 0xdc, 0x46, 0xcf, 0x60,
	0x37, 0xdf, 0xf7, 0xfb, 0xc1, 0xc0, 0x07, 0xf1, 0xd3, 0x7d, 0xcd, 0xd4, 0xd4, 0x8e, 0x33, 0x47,
	0x4d, 0x43, 0x76, 0xd3, 0x5b, 0xc3, 0x06, 0xd7, 0xaf, 0xc4, 0x7a, 0xb3, 0x87, 0xa7, 0x5f, 0x02,
	0xa2, 0x6b, 0x2f, 0xe0, 0x09, 0xac, 0x26, 0x35, 0xaf, 0xa4, 0x48, 0x44, 0x1a, 0x16, 0xfb, 0x8c,
	0x08, 0x61, 0xa7, 0x5b, 0x92, 0x07, 0x89, 0x48, 0x8f, 0x0a, 0x7f, 0x63, 0x02, 0xc7, 0xa5, 0xe9,
	0x58, 0x97, 0x9c, 0x77, 0x77, 0x46, 0x2e, 0x3c, 0x9a, 0x57, 0x28, 0x61, 0xa9, 0xab, 0xca, 0x92,
	0x73, 0x32, 0xf4, 0xf4, 0x37, 0x62, 0x0c, 0x91, 0x63, 0xcd, 0x0f, 0x4e, 0x1e, 0x7a, 0xf0, 0x93,
	0x50, 0x01, 0xe8, 0x92, 0xeb, 0x47, 0xca, 0x99, 0x5a, 0x19, 0x25, 0x8b, 0x34, 0x2c, 0x66, 0xcd,
	0xee, 0xe7, 0x94, 0xae, 0x6c, 0x45, 0x56, 0x2e, 0xbd, 0x30, 0xaf, 0xf0, 0x0c, 0xd6, 0xa5, 0x69,
	0xfb, 0x86, 0x98, 0xaa, 0x49, 0x5a, 0x79, 0xe9, 0x5f, 0x7b, 0x79, 0xfe, 0x3e, 0x28, 0xb1, 0x1d,
	0x94, 0xf8, 0x1c, 0x94, 0x78, 0x1b, 0x55, 0xb0, 0x1d, 0x55, 0xf0, 0x31, 0xaa, 0xe0, 0x26, 0xde,
	0x4d, 0x94, 0x3d, 0x67, 0x7f, 0x0b, 0xf2, 0x4b, 0x4f, 0xee, 0x36, 0xf2, 0x0b, 0x5e, 0x7c, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x2f, 0xfc, 0x19, 0xa1, 0x5b, 0x01, 0x00, 0x00,
}

func (m *Seller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Seller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Seller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompletedOrder) > 0 {
		dAtA2 := make([]byte, len(m.CompletedOrder)*10)
		var j1 int
		for _, num := range m.CompletedOrder {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSeller(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ActiveOrder) > 0 {
		dAtA4 := make([]byte, len(m.ActiveOrder)*10)
		var j3 int
		for _, num := range m.ActiveOrder {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSeller(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ActiveItem) > 0 {
		dAtA6 := make([]byte, len(m.ActiveItem)*10)
		var j5 int
		for _, num := range m.ActiveItem {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintSeller(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContactInfo) > 0 {
		i -= len(m.ContactInfo)
		copy(dAtA[i:], m.ContactInfo)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.ContactInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.SellerId != 0 {
		i = encodeVarintSeller(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSeller(dAtA []byte, offset int, v uint64) int {
	offset -= sovSeller(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Seller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellerId != 0 {
		n += 1 + sovSeller(uint64(m.SellerId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	l = len(m.ContactInfo)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	if len(m.ActiveItem) > 0 {
		l = 0
		for _, e := range m.ActiveItem {
			l += sovSeller(uint64(e))
		}
		n += 1 + sovSeller(uint64(l)) + l
	}
	if len(m.ActiveOrder) > 0 {
		l = 0
		for _, e := range m.ActiveOrder {
			l += sovSeller(uint64(e))
		}
		n += 1 + sovSeller(uint64(l)) + l
	}
	if len(m.CompletedOrder) > 0 {
		l = 0
		for _, e := range m.CompletedOrder {
			l += sovSeller(uint64(e))
		}
		n += 1 + sovSeller(uint64(l)) + l
	}
	return n
}

func sovSeller(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSeller(x uint64) (n int) {
	return sovSeller(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Seller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeller
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Seller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Seller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeller
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveItem = append(m.ActiveItem, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeller
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSeller
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSeller
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveItem) == 0 {
					m.ActiveItem = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeller
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveItem = append(m.ActiveItem, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveItem", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeller
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveOrder = append(m.ActiveOrder, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeller
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSeller
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSeller
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveOrder) == 0 {
					m.ActiveOrder = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeller
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveOrder = append(m.ActiveOrder, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveOrder", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeller
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompletedOrder = append(m.CompletedOrder, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeller
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSeller
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSeller
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompletedOrder) == 0 {
					m.CompletedOrder = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeller
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompletedOrder = append(m.CompletedOrder, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedOrder", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeller(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSeller
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeller(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeller
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSeller
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSeller
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSeller
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSeller        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeller          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSeller = fmt.Errorf("proto: unexpected end of group")
)
