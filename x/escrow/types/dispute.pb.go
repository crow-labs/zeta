// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/dispute.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Dispute struct {
	DisputeId        uint64   `protobuf:"varint,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Title            string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description      string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	BuyerEvidence    []string `protobuf:"bytes,4,rep,name=buyerEvidence,proto3" json:"buyerEvidence,omitempty"`
	SellerEvidence   []string `protobuf:"bytes,5,rep,name=sellerEvidence,proto3" json:"sellerEvidence,omitempty"`
	VotingBeginBlock uint64   `protobuf:"varint,6,opt,name=votingBeginBlock,proto3" json:"votingBeginBlock,omitempty"`
	VotingEndBlock   uint64   `protobuf:"varint,7,opt,name=votingEndBlock,proto3" json:"votingEndBlock,omitempty"`
	CrowId           uint64   `protobuf:"varint,8,opt,name=crowId,proto3" json:"crowId,omitempty"`
	PollId           uint64   `protobuf:"varint,9,opt,name=pollId,proto3" json:"pollId,omitempty"`
	BuyerId          uint64   `protobuf:"varint,10,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId         uint64   `protobuf:"varint,11,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Creator          string   `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Dispute) Reset()         { *m = Dispute{} }
func (m *Dispute) String() string { return proto.CompactTextString(m) }
func (*Dispute) ProtoMessage()    {}
func (*Dispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_e494efae027aa112, []int{0}
}
func (m *Dispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dispute.Merge(m, src)
}
func (m *Dispute) XXX_Size() int {
	return m.Size()
}
func (m *Dispute) XXX_DiscardUnknown() {
	xxx_messageInfo_Dispute.DiscardUnknown(m)
}

var xxx_messageInfo_Dispute proto.InternalMessageInfo

func (m *Dispute) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Dispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Dispute) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dispute) GetBuyerEvidence() []string {
	if m != nil {
		return m.BuyerEvidence
	}
	return nil
}

func (m *Dispute) GetSellerEvidence() []string {
	if m != nil {
		return m.SellerEvidence
	}
	return nil
}

func (m *Dispute) GetVotingBeginBlock() uint64 {
	if m != nil {
		return m.VotingBeginBlock
	}
	return 0
}

func (m *Dispute) GetVotingEndBlock() uint64 {
	if m != nil {
		return m.VotingEndBlock
	}
	return 0
}

func (m *Dispute) GetCrowId() uint64 {
	if m != nil {
		return m.CrowId
	}
	return 0
}

func (m *Dispute) GetPollId() uint64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *Dispute) GetBuyerId() uint64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *Dispute) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *Dispute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Dispute)(nil), "zeta.escrow.Dispute")
}

func init() { proto.RegisterFile("escrow/dispute.proto", fileDescriptor_e494efae027aa112) }

var fileDescriptor_e494efae027aa112 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4b, 0xfb, 0x30,
	0x18, 0xc7, 0x97, 0xdf, 0xfe, 0x74, 0x7d, 0xfa, 0x53, 0x24, 0x0e, 0x09, 0x22, 0xa1, 0x88, 0x48,
	0x11, 0x5c, 0x0f, 0xbe, 0x83, 0xe2, 0x0e, 0xbd, 0xf6, 0xe8, 0x6d, 0x6b, 0xc2, 0x08, 0x86, 0xa6,
	0xb4, 0xd9, 0x74, 0xde, 0x7c, 0x07, 0xbe, 0x2c, 0x8f, 0x3b, 0x7a, 0x94, 0xf6, 0x8d, 0x48, 0x92,
	0x4e, 0xe7, 0x3c, 0x7e, 0x3f, 0x9f, 0x6f, 0xc2, 0xc3, 0xf3, 0xc0, 0x84, 0xd7, 0x79, 0xa5, 0x9e,
	0x62, 0x26, 0xea, 0x72, 0xa5, 0xf9, 0xb4, 0xac, 0x94, 0x56, 0x38, 0x78, 0xe1, 0x7a, 0x3e, 0x75,
	0xea, 0xf2, 0xb5, 0x0f, 0xde, 0xbd, 0xd3, 0xf8, 0x02, 0xfc, 0xae, 0x99, 0x32, 0x82, 0x42, 0x14,
	0x0d, 0xb2, 0x1f, 0x80, 0x27, 0x30, 0xd4, 0x42, 0x4b, 0x4e, 0xfe, 0x85, 0x28, 0xf2, 0x33, 0x17,
	0x70, 0x08, 0x01, 0x33, 0x5f, 0x89, 0x52, 0x0b, 0x55, 0x90, 0xbe, 0x75, 0xfb, 0x08, 0x5f, 0xc1,
	0xd1, 0x62, 0xb5, 0xe1, 0xd5, 0x6c, 0x2d, 0x18, 0x2f, 0x72, 0x4e, 0x06, 0x61, 0x3f, 0xf2, 0xb3,
	0xdf, 0x10, 0x5f, 0xc3, 0x71, 0xcd, 0xa5, 0xdc, 0xab, 0x0d, 0x6d, 0xed, 0x80, 0xe2, 0x1b, 0x38,
	0x59, 0x2b, 0x2d, 0x8a, 0x65, 0xc2, 0x97, 0xa2, 0x48, 0xa4, 0xca, 0x1f, 0xc9, 0xc8, 0x8e, 0xfa,
	0x87, 0x9b, 0x3f, 0x1d, 0x9b, 0x15, 0xcc, 0x35, 0x3d, 0xdb, 0x3c, 0xa0, 0xf8, 0x0c, 0x46, 0x66,
	0x17, 0x29, 0x23, 0x63, 0xeb, 0xbb, 0x64, 0x78, 0xa9, 0xa4, 0x4c, 0x19, 0xf1, 0x1d, 0x77, 0x09,
	0x13, 0xf0, 0xec, 0xf0, 0x29, 0x23, 0x60, 0xc5, 0x2e, 0xe2, 0x73, 0x18, 0xbb, 0x79, 0x53, 0x46,
	0x02, 0xab, 0xbe, 0xb3, 0x79, 0x95, 0x57, 0x7c, 0xae, 0x55, 0x45, 0xfe, 0xdb, 0x2d, 0xed, 0x62,
	0x72, 0xfb, 0xde, 0x50, 0xb4, 0x6d, 0x28, 0xfa, 0x6c, 0x28, 0x7a, 0x6b, 0x69, 0x6f, 0xdb, 0xd2,
	0xde, 0x47, 0x4b, 0x7b, 0x0f, 0xa7, 0xe6, 0x54, 0xf1, 0x73, 0xdc, 0xdd, 0x51, 0x6f, 0x4a, 0x5e,
	0x2f, 0x46, 0xf6, 0x8c, 0x77, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x16, 0xe8, 0x1f, 0xde,
	0x01, 0x00, 0x00,
}

func (m *Dispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x62
	}
	if m.SellerId != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x58
	}
	if m.BuyerId != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.BuyerId))
		i--
		dAtA[i] = 0x50
	}
	if m.PollId != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x48
	}
	if m.CrowId != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.CrowId))
		i--
		dAtA[i] = 0x40
	}
	if m.VotingEndBlock != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.VotingEndBlock))
		i--
		dAtA[i] = 0x38
	}
	if m.VotingBeginBlock != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.VotingBeginBlock))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SellerEvidence) > 0 {
		for iNdEx := len(m.SellerEvidence) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SellerEvidence[iNdEx])
			copy(dAtA[i:], m.SellerEvidence[iNdEx])
			i = encodeVarintDispute(dAtA, i, uint64(len(m.SellerEvidence[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BuyerEvidence) > 0 {
		for iNdEx := len(m.BuyerEvidence) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BuyerEvidence[iNdEx])
			copy(dAtA[i:], m.BuyerEvidence[iNdEx])
			i = encodeVarintDispute(dAtA, i, uint64(len(m.BuyerEvidence[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.DisputeId != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDispute(dAtA []byte, offset int, v uint64) int {
	offset -= sovDispute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisputeId != 0 {
		n += 1 + sovDispute(uint64(m.DisputeId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	if len(m.BuyerEvidence) > 0 {
		for _, s := range m.BuyerEvidence {
			l = len(s)
			n += 1 + l + sovDispute(uint64(l))
		}
	}
	if len(m.SellerEvidence) > 0 {
		for _, s := range m.SellerEvidence {
			l = len(s)
			n += 1 + l + sovDispute(uint64(l))
		}
	}
	if m.VotingBeginBlock != 0 {
		n += 1 + sovDispute(uint64(m.VotingBeginBlock))
	}
	if m.VotingEndBlock != 0 {
		n += 1 + sovDispute(uint64(m.VotingEndBlock))
	}
	if m.CrowId != 0 {
		n += 1 + sovDispute(uint64(m.CrowId))
	}
	if m.PollId != 0 {
		n += 1 + sovDispute(uint64(m.PollId))
	}
	if m.BuyerId != 0 {
		n += 1 + sovDispute(uint64(m.BuyerId))
	}
	if m.SellerId != 0 {
		n += 1 + sovDispute(uint64(m.SellerId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	return n
}

func sovDispute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDispute(x uint64) (n int) {
	return sovDispute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerEvidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerEvidence = append(m.BuyerEvidence, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerEvidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerEvidence = append(m.SellerEvidence, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingBeginBlock", wireType)
			}
			m.VotingBeginBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingBeginBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndBlock", wireType)
			}
			m.VotingEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingEndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			m.CrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			m.BuyerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDispute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDispute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDispute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDispute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDispute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDispute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDispute = fmt.Errorf("proto: unexpected end of group")
)
