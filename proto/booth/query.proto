syntax = "proto3";
package zeta.booth;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "booth/params.proto";
import "booth/vote.proto";
// this line is used by starport scaffolding # 1
import "booth/vote_params.proto";

option go_package = "zeta/x/booth/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/zeta/booth/params";
  }
  // Queries a Vote by index.
	rpc Vote(QueryGetVoteRequest) returns (QueryGetVoteResponse) {
		option (google.api.http).get = "/zeta/booth/vote/{voteId}";
	}

	// Queries a list of Vote items.
	rpc VoteAll(QueryAllVoteRequest) returns (QueryAllVoteResponse) {
		option (google.api.http).get = "/zeta/booth/vote";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetVoteRequest {
	  uint64 voteId = 1;

}

message QueryGetVoteResponse {
	Vote vote = 1 [(gogoproto.nullable) = false];
}

message QueryAllVoteRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVoteResponse {
	repeated Vote vote = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
