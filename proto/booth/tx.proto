syntax = "proto3";
package zeta.booth;

// this line is used by starport scaffolding # proto/tx/import
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "booth/vote_params.proto";

option go_package = "zeta/x/booth/types";

// Msg defines the Msg service.
service Msg {
      rpc BeginPoll(MsgBeginPoll) returns (MsgBeginPollResponse);
  rpc CastVoteForPoll(MsgCastVoteForPoll) returns (MsgCastVoteForPollResponse);
  rpc RedeemPollShares(MsgRedeemPollShares) returns (MsgRedeemPollSharesResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgBeginPoll {
  string creator = 1;
  uint64 disputeId = 2;
}

message MsgBeginPollResponse {
  uint64 pollId = 1;
}

message MsgCastVoteForPoll {
  string creator = 1;
  uint64 pollId = 2;
  uint64 voterId = 3;
  VoteParams ballot = 4;
}

message MsgCastVoteForPollResponse {
  uint64 voteId = 1;
}

message MsgRedeemPollShares {
  string creator = 1;
  uint64 pollId = 2;
  uint64 voterId = 3;
  cosmos.base.v1beta1.Coin pollShares = 4 [(gogoproto.nullable) = false];
}

message MsgRedeemPollSharesResponse {
  cosmos.base.v1beta1.Coin valueOut = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # proto/tx/message
