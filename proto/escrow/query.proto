syntax = "proto3";
package zeta.escrow;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "escrow/params.proto";
import "escrow/crow.proto";
import "escrow/dispute.proto";
// this line is used by starport scaffolding # 1
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "zeta/x/escrow/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/zeta/escrow/params";
  }
  // Queries a Crow by index.
	rpc Crow(QueryGetCrowRequest) returns (QueryGetCrowResponse) {
		option (google.api.http).get = "/zeta/escrow/crow/{crowId}";
	}

	// Queries a list of Crow items.
	rpc CrowAll(QueryAllCrowRequest) returns (QueryAllCrowResponse) {
		option (google.api.http).get = "/zeta/escrow/crow";
	}

// Queries a Dispute by index.
	rpc Dispute(QueryGetDisputeRequest) returns (QueryGetDisputeResponse) {
		option (google.api.http).get = "/zeta/escrow/dispute/{disputeId}";
	}

	// Queries a list of Dispute items.
	rpc DisputeAll(QueryAllDisputeRequest) returns (QueryAllDisputeResponse) {
		option (google.api.http).get = "/zeta/escrow/dispute";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCrowRequest {
	  uint64 crowId = 1;

}

message QueryGetCrowResponse {
	Crow crow = 1 [(gogoproto.nullable) = false];
}

message QueryAllCrowRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCrowResponse {
	repeated Crow crow = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetDisputeRequest {
	  uint64 disputeId = 1;

}

message QueryGetDisputeResponse {
	Dispute dispute = 1 [(gogoproto.nullable) = false];
}

message QueryAllDisputeRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDisputeResponse {
	repeated Dispute dispute = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
