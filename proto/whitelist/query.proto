syntax = "proto3";
package zeta.whitelist;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "whitelist/params.proto";
import "whitelist/member.proto";
import "whitelist/buyer.proto";
import "whitelist/seller.proto";
// this line is used by starport scaffolding # 1

option go_package = "zeta/x/whitelist/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/zeta/whitelist/params";
  }
  // Queries a Member by index.
	rpc Member(QueryGetMemberRequest) returns (QueryGetMemberResponse) {
		option (google.api.http).get = "/zeta/whitelist/member/{baseAddr}";
	}

	// Queries a list of Member items.
	rpc MemberAll(QueryAllMemberRequest) returns (QueryAllMemberResponse) {
		option (google.api.http).get = "/zeta/whitelist/member";
	}

// Queries a Buyer by index.
	rpc Buyer(QueryGetBuyerRequest) returns (QueryGetBuyerResponse) {
		option (google.api.http).get = "/zeta/whitelist/buyer/{buyerId}";
	}

	// Queries a list of Buyer items.
	rpc BuyerAll(QueryAllBuyerRequest) returns (QueryAllBuyerResponse) {
		option (google.api.http).get = "/zeta/whitelist/buyer";
	}

// Queries a Seller by index.
	rpc Seller(QueryGetSellerRequest) returns (QueryGetSellerResponse) {
		option (google.api.http).get = "/zeta/whitelist/seller/{sellerId}";
	}

	// Queries a list of Seller items.
	rpc SellerAll(QueryAllSellerRequest) returns (QueryAllSellerResponse) {
		option (google.api.http).get = "/zeta/whitelist/seller";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetMemberRequest {
	  string baseAddr = 1;

}

message QueryGetMemberResponse {
	Member member = 1 [(gogoproto.nullable) = false];
}

message QueryAllMemberRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMemberResponse {
	repeated Member member = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBuyerRequest {
	  uint64 buyerId = 1;

}

message QueryGetBuyerResponse {
	Buyer buyer = 1 [(gogoproto.nullable) = false];
}

message QueryAllBuyerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBuyerResponse {
	repeated Buyer buyer = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSellerRequest {
	  uint64 sellerId = 1;

}

message QueryGetSellerResponse {
	Seller seller = 1 [(gogoproto.nullable) = false];
}

message QueryAllSellerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSellerResponse {
	repeated Seller seller = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
